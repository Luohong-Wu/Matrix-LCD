/*
$Id:$

ST7565 LCD library!

Copyright (C) 2010 Limor Fried, Adafruit Industries

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA

// some of this code was written by <cstone@pobox.com> originally; it is in the public domain.
*/

#if ARDUINO >= 100
 #include "Arduino.h"
#else
 #include "WProgram.h"
#endif



#ifndef __AVR__
#define PROGMEM
#endif

#define BLUE 3
#define GREEN 2
#define RED 1
#define OFF 0

#define MaxScore 5.0
#define MinScore 0.0
#define NumberOfWords 168
#define NumberOfLines 8
#define NumberOfMaxCols



#define swap(a, b) { uint8_t t = a; a = b; b = t; }

#define BLACK 1
#define WHITE 0

#define LCDWIDTH 128
#define LCDHEIGHT 64

#define CMD_DISPLAY_OFF   0xAE
#define CMD_DISPLAY_ON    0xAF

#define CMD_SET_DISP_START_LINE  0x40
#define CMD_SET_PAGE  0xB0

#define CMD_SET_COLUMN_UPPER  0x10
#define CMD_SET_COLUMN_LOWER  0x00

#define CMD_SET_ADC_NORMAL  0xA0
#define CMD_SET_ADC_REVERSE 0xA1

#define CMD_SET_DISP_NORMAL 0xA6
#define CMD_SET_DISP_REVERSE 0xA7

#define CMD_SET_ALLPTS_NORMAL 0xA4
#define CMD_SET_ALLPTS_ON  0xA5
#define CMD_SET_BIAS_9 0xA2 
#define CMD_SET_BIAS_7 0xA3

#define CMD_RMW  0xE0
#define CMD_RMW_CLEAR 0xEE
#define CMD_INTERNAL_RESET  0xE2
#define CMD_SET_COM_NORMAL  0xC0
#define CMD_SET_COM_REVERSE  0xC8
#define CMD_SET_POWER_CONTROL  0x28
#define CMD_SET_RESISTOR_RATIO  0x20
#define CMD_SET_VOLUME_FIRST  0x81
#define  CMD_SET_VOLUME_SECOND  0
#define CMD_SET_STATIC_OFF  0xAC
#define  CMD_SET_STATIC_ON  0xAD
#define CMD_SET_STATIC_REG  0x0
#define CMD_SET_BOOSTER_FIRST  0xF8
#define CMD_SET_BOOSTER_234  0
#define  CMD_SET_BOOSTER_5  1
#define  CMD_SET_BOOSTER_6  3
#define CMD_NOP  0xE3
#define CMD_TEST  0xF0

class LCD {
 public:
	 LCD(int8_t SID, int8_t SCLK, int8_t A0, int8_t RST, int8_t CS, int8_t BACKLIGHT_RED, int8_t BACKLIGHT_GREEN, int8_t BACKLIGHT_BLUE )
		 :sid(SID), sclk(SCLK), a0(A0), rst(RST), cs(CS), backlight_red(BACKLIGHT_RED), backlight_green(BACKLIGHT_GREEN), backlight_blue(BACKLIGHT_BLUE) {
	 };
  LCD(int8_t SID, int8_t SCLK, int8_t A0, int8_t RST) :sid(SID), sclk(SCLK), a0(A0), rst(RST), cs(-1) {}


  void st7565_init(void);
  void initialize();
  void st7565Command(uint8_t c);
  void st7565Data(uint8_t c);
  void st7565SetBrightness(uint8_t val);
  void clearDisplay(void);
  void clear();
  void display();
  void setBacklight(int color);

  void fadeToBlack(int number);
  void writeLine(int x, int y, char* text);

  void setPixel(uint8_t x, uint8_t y, uint8_t color);
  uint8_t getpixel(uint8_t x, uint8_t y);
  void fillCircle(uint8_t x0, uint8_t y0, uint8_t r, 
		  uint8_t color);
  void drawCircle(uint8_t x0, uint8_t y0, uint8_t r, 
		  uint8_t color);
  void drawRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, 
		uint8_t color);
  void fillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, 
		uint8_t color);
  void drawLine(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1, 
		uint8_t color);
  void drawChar(uint8_t x, uint8_t line, char c);
  void drawString(uint8_t x, uint8_t line, char *c);
  void drawString_P(uint8_t x, uint8_t line, const char *c);

  void drawBitmap(uint8_t x, uint8_t y, 
		  const uint8_t *bitmap, uint8_t w, uint8_t h,
		  uint8_t color);

 private:
  int8_t sid, sclk, a0, rst, cs,backlight_red, backlight_green, backlight_blue;
  void spiwrite(uint8_t c);

  void my_setpixel(uint8_t x, uint8_t y, uint8_t color);

  //uint8_t buffer[128*64/8]; 
};

const unsigned char font[] PROGMEM = {
	0x0, 0x0, 0x0, 0x0, 0x0,       // Ascii 0
	0x7C, 0xDA, 0xF2, 0xDA, 0x7C,  //ASC(01)
	0x7C, 0xD6, 0xF2, 0xD6, 0x7C,  //ASC(02)
	0x38, 0x7C, 0x3E, 0x7C, 0x38,
	0x18, 0x3C, 0x7E, 0x3C, 0x18,
	0x38, 0xEA, 0xBE, 0xEA, 0x38,
	0x38, 0x7A, 0xFE, 0x7A, 0x38,
	0x0, 0x18, 0x3C, 0x18, 0x0,
	0xFF, 0xE7, 0xC3, 0xE7, 0xFF,
	0x0, 0x18, 0x24, 0x18, 0x0,
	0xFF, 0xE7, 0xDB, 0xE7, 0xFF,
	0xC, 0x12, 0x5C, 0x60, 0x70,
	0x64, 0x94, 0x9E, 0x94, 0x64,
	0x2, 0xFE, 0xA0, 0xA0, 0xE0,
	0x2, 0xFE, 0xA0, 0xA4, 0xFC,
	0x5A, 0x3C, 0xE7, 0x3C, 0x5A,
	0xFE, 0x7C, 0x38, 0x38, 0x10,
	0x10, 0x38, 0x38, 0x7C, 0xFE,
	0x28, 0x44, 0xFE, 0x44, 0x28,
	0xFA, 0xFA, 0x0, 0xFA, 0xFA,
	0x60, 0x90, 0xFE, 0x80, 0xFE,
	0x0, 0x66, 0x91, 0xA9, 0x56,
	0x6, 0x6, 0x6, 0x6, 0x6,
	0x29, 0x45, 0xFF, 0x45, 0x29,
	0x10, 0x20, 0x7E, 0x20, 0x10,
	0x8, 0x4, 0x7E, 0x4, 0x8,
	0x10, 0x10, 0x54, 0x38, 0x10,
	0x10, 0x38, 0x54, 0x10, 0x10,
	0x78, 0x8, 0x8, 0x8, 0x8,
	0x30, 0x78, 0x30, 0x78, 0x30,
	0xC, 0x1C, 0x7C, 0x1C, 0xC,
	0x60, 0x70, 0x7C, 0x70, 0x60,
	0x0, 0x0, 0x0, 0x0, 0x0,
	0x0, 0x0, 0xFA, 0x0, 0x0,
	0x0, 0xE0, 0x0, 0xE0, 0x0,
	0x28, 0xFE, 0x28, 0xFE, 0x28,
	0x24, 0x54, 0xFE, 0x54, 0x48,
	0xC4, 0xC8, 0x10, 0x26, 0x46,
	0x6C, 0x92, 0x6A, 0x4, 0xA,
	0x0, 0x10, 0xE0, 0xC0, 0x0,
	0x0, 0x38, 0x44, 0x82, 0x0,
	0x0, 0x82, 0x44, 0x38, 0x0,
	0x54, 0x38, 0xFE, 0x38, 0x54,
	0x10, 0x10, 0x7C, 0x10, 0x10,
	0x0, 0x1, 0xE, 0xC, 0x0,
	0x10, 0x10, 0x10, 0x10, 0x10,
	0x0, 0x0, 0x6, 0x6, 0x0,
	0x4, 0x8, 0x10, 0x20, 0x40,
	0x7C, 0x8A, 0x92, 0xA2, 0x7C,
	0x0, 0x42, 0xFE, 0x2, 0x0,
	0x4E, 0x92, 0x92, 0x92, 0x62,
	0x84, 0x82, 0x92, 0xB2, 0xCC,
	0x18, 0x28, 0x48, 0xFE, 0x8,
	0xE4, 0xA2, 0xA2, 0xA2, 0x9C,
	0x3C, 0x52, 0x92, 0x92, 0x8C,
	0x82, 0x84, 0x88, 0x90, 0xE0,
	0x6C, 0x92, 0x92, 0x92, 0x6C,
	0x62, 0x92, 0x92, 0x94, 0x78,
	0x0, 0x0, 0x28, 0x0, 0x0,
	0x0, 0x2, 0x2C, 0x0, 0x0,
	0x0, 0x10, 0x28, 0x44, 0x82,
	0x28, 0x28, 0x28, 0x28, 0x28,
	0x0, 0x82, 0x44, 0x28, 0x10,
	0x40, 0x80, 0x9A, 0x90, 0x60,
	0x7C, 0x82, 0xBA, 0x9A, 0x72,
	0x3E, 0x48, 0x88, 0x48, 0x3E,
	0xFE, 0x92, 0x92, 0x92, 0x6C,
	0x7C, 0x82, 0x82, 0x82, 0x44,
	0xFE, 0x82, 0x82, 0x82, 0x7C,
	0xFE, 0x92, 0x92, 0x92, 0x82,
	0xFE, 0x90, 0x90, 0x90, 0x80,
	0x7C, 0x82, 0x82, 0x8A, 0xCE,
	0xFE, 0x10, 0x10, 0x10, 0xFE,
	0x0, 0x82, 0xFE, 0x82, 0x0,
	0x4, 0x2, 0x82, 0xFC, 0x80,
	0xFE, 0x10, 0x28, 0x44, 0x82,
	0xFE, 0x2, 0x2, 0x2, 0x2,
	0xFE, 0x40, 0x38, 0x40, 0xFE,
	0xFE, 0x20, 0x10, 0x8, 0xFE,
	0x7C, 0x82, 0x82, 0x82, 0x7C,
	0xFE, 0x90, 0x90, 0x90, 0x60,
	0x7C, 0x82, 0x8A, 0x84, 0x7A,
	0xFE, 0x90, 0x98, 0x94, 0x62,
	0x64, 0x92, 0x92, 0x92, 0x4C,
	0xC0, 0x80, 0xFE, 0x80, 0xC0,
	0xFC, 0x2, 0x2, 0x2, 0xFC,
	0xF8, 0x4, 0x2, 0x4, 0xF8,
	0xFC, 0x2, 0x1C, 0x2, 0xFC,
	0xC6, 0x28, 0x10, 0x28, 0xC6,
	0xC0, 0x20, 0x1E, 0x20, 0xC0,
	0x86, 0x9A, 0x92, 0xB2, 0xC2,
	0x0, 0xFE, 0x82, 0x82, 0x82,
	0x40, 0x20, 0x10, 0x8, 0x4,
	0x0, 0x82, 0x82, 0x82, 0xFE,
	0x20, 0x40, 0x80, 0x40, 0x20,
	0x2, 0x2, 0x2, 0x2, 0x2,
	0x0, 0xC0, 0xE0, 0x10, 0x0,
	0x4, 0x2A, 0x2A, 0x1E, 0x2,
	0xFE, 0x14, 0x22, 0x22, 0x1C,
	0x1C, 0x22, 0x22, 0x22, 0x14,
	0x1C, 0x22, 0x22, 0x14, 0xFE,
	0x1C, 0x2A, 0x2A, 0x2A, 0x18,
	0x0, 0x10, 0x7E, 0x90, 0x40,
	0x18, 0x25, 0x25, 0x39, 0x1E,
	0xFE, 0x10, 0x20, 0x20, 0x1E,
	0x0, 0x22, 0xBE, 0x2, 0x0,
	0x4, 0x2, 0x2, 0xBC, 0x0,
	0xFE, 0x8, 0x14, 0x22, 0x0,
	0x0, 0x82, 0xFE, 0x2, 0x0,
	0x3E, 0x20, 0x1E, 0x20, 0x1E,
	0x3E, 0x10, 0x20, 0x20, 0x1E,
	0x1C, 0x22, 0x22, 0x22, 0x1C,
	0x3F, 0x18, 0x24, 0x24, 0x18,
	0x18, 0x24, 0x24, 0x18, 0x3F,
	0x3E, 0x10, 0x20, 0x20, 0x10,
	0x12, 0x2A, 0x2A, 0x2A, 0x24,
	0x20, 0x20, 0xFC, 0x22, 0x24,
	0x3C, 0x2, 0x2, 0x4, 0x3E,
	0x38, 0x4, 0x2, 0x4, 0x38,
	0x3C, 0x2, 0xC, 0x2, 0x3C,
	0x22, 0x14, 0x8, 0x14, 0x22,
	0x32, 0x9, 0x9, 0x9, 0x3E,
	0x22, 0x26, 0x2A, 0x32, 0x22,
	0x0, 0x10, 0x6C, 0x82, 0x0,
	0x0, 0x0, 0xEE, 0x0, 0x0,
	0x0, 0x82, 0x6C, 0x10, 0x0,
	0x40, 0x80, 0x40, 0x20, 0x40,
	0x3C, 0x64, 0xC4, 0x64, 0x3C,
	0x78, 0x85, 0x85, 0x86, 0x48,
	0x5C, 0x2, 0x2, 0x4, 0x5E,
	0x1C, 0x2A, 0x2A, 0xAA, 0x9A,
	0x84, 0xAA, 0xAA, 0x9E, 0x82,
	0x84, 0x2A, 0x2A, 0x1E, 0x82,
	0x84, 0xAA, 0x2A, 0x1E, 0x2,
	0x4, 0x2A, 0xAA, 0x9E, 0x2,
	0x30, 0x78, 0x4A, 0x4E, 0x48,
	0x9C, 0xAA, 0xAA, 0xAA, 0x9A,
	0x9C, 0x2A, 0x2A, 0x2A, 0x9A,
	0x9C, 0xAA, 0x2A, 0x2A, 0x1A,
	0x0, 0x0, 0xA2, 0x3E, 0x82,
	0x0, 0x40, 0xA2, 0xBE, 0x42,
	0x0, 0x80, 0xA2, 0x3E, 0x2,
	0xF, 0x94, 0x24, 0x94, 0xF,
	0xF, 0x14, 0xA4, 0x14, 0xF,
	0x3E, 0x2A, 0xAA, 0xA2, 0x0,
	0x4, 0x2A, 0x2A, 0x3E, 0x2A,
	0x3E, 0x50, 0x90, 0xFE, 0x92,
	0x4C, 0x92, 0x92, 0x92, 0x4C,
	0x4C, 0x12, 0x12, 0x12, 0x4C,
	0x4C, 0x52, 0x12, 0x12, 0xC,
	0x5C, 0x82, 0x82, 0x84, 0x5E,
	0x5C, 0x42, 0x2, 0x4, 0x1E,
	0x0, 0xB9, 0x5, 0x5, 0xBE,
	0x9C, 0x22, 0x22, 0x22, 0x9C,
	0xBC, 0x2, 0x2, 0x2, 0xBC,
	0x3C, 0x24, 0xFF, 0x24, 0x24,
	0x12, 0x7E, 0x92, 0xC2, 0x66,
	0xD4, 0xF4, 0x3F, 0xF4, 0xD4,
	0xFF, 0x90, 0x94, 0x6F, 0x4,
	0x3, 0x11, 0x7E, 0x90, 0xC0,
	0x4, 0x2A, 0x2A, 0x9E, 0x82,
	0x0, 0x0, 0x22, 0xBE, 0x82,
	0xC, 0x12, 0x12, 0x52, 0x4C,
	0x1C, 0x2, 0x2, 0x44, 0x5E,
	0x0, 0x5E, 0x50, 0x50, 0x4E,
	0xBE, 0xB0, 0x98, 0x8C, 0xBE,
	0x64, 0x94, 0x94, 0xF4, 0x14,
	0x64, 0x94, 0x94, 0x94, 0x64,
	0xC, 0x12, 0xB2, 0x2, 0x4,
	0x1C, 0x10, 0x10, 0x10, 0x10,
	0x10, 0x10, 0x10, 0x10, 0x1C,
	0xF4, 0x8, 0x13, 0x35, 0x5D,
	0xF4, 0x8, 0x14, 0x2C, 0x5F,
	0x0, 0x0, 0xDE, 0x0, 0x0,
	0x10, 0x28, 0x54, 0x28, 0x44,
	0x44, 0x28, 0x54, 0x28, 0x10,
	0x55, 0x0, 0xAA, 0x0, 0x55,
	0x55, 0xAA, 0x55, 0xAA, 0x55,
	0xAA, 0x55, 0xAA, 0x55, 0xAA,
	0x0, 0x0, 0x0, 0xFF, 0x0,
	0x8, 0x8, 0x8, 0xFF, 0x0,
	0x28, 0x28, 0x28, 0xFF, 0x0,
	0x8, 0x8, 0xFF, 0x0, 0xFF,
	0x8, 0x8, 0xF, 0x8, 0xF,
	0x28, 0x28, 0x28, 0x3F, 0x0,
	0x28, 0x28, 0xEF, 0x0, 0xFF,
	0x0, 0x0, 0xFF, 0x0, 0xFF,
	0x28, 0x28, 0x2F, 0x20, 0x3F,
	0x28, 0x28, 0xE8, 0x8, 0xF8,
	0x8, 0x8, 0xF8, 0x8, 0xF8,
	0x28, 0x28, 0x28, 0xF8, 0x0,
	0x8, 0x8, 0x8, 0xF, 0x0,
	0x0, 0x0, 0x0, 0xF8, 0x8,
	0x8, 0x8, 0x8, 0xF8, 0x8,
	0x8, 0x8, 0x8, 0xF, 0x8,
	0x0, 0x0, 0x0, 0xFF, 0x8,
	0x8, 0x8, 0x8, 0x8, 0x8,
	0x8, 0x8, 0x8, 0xFF, 0x8,
	0x0, 0x0, 0x0, 0xFF, 0x28,
	0x0, 0x0, 0xFF, 0x0, 0xFF,
	0x0, 0x0, 0xF8, 0x8, 0xE8,
	0x0, 0x0, 0x3F, 0x20, 0x2F,
	0x28, 0x28, 0xE8, 0x8, 0xE8,
	0x28, 0x28, 0x2F, 0x20, 0x2F,
	0x0, 0x0, 0xFF, 0x0, 0xEF,
	0x28, 0x28, 0x28, 0x28, 0x28,
	0x28, 0x28, 0xEF, 0x0, 0xEF,
	0x28, 0x28, 0x28, 0xE8, 0x28,
	0x8, 0x8, 0xF8, 0x8, 0xF8,
	0x28, 0x28, 0x28, 0x2F, 0x28,
	0x8, 0x8, 0xF, 0x8, 0xF,
	0x0, 0x0, 0xF8, 0x8, 0xF8,
	0x0, 0x0, 0x0, 0xF8, 0x28,
	0x0, 0x0, 0x0, 0x3F, 0x28,
	0x0, 0x0, 0xF, 0x8, 0xF,
	0x8, 0x8, 0xFF, 0x8, 0xFF,
	0x28, 0x28, 0x28, 0xFF, 0x28,
	0x8, 0x8, 0x8, 0xF8, 0x0,
	0x0, 0x0, 0x0, 0xF, 0x8,
	0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
	0xF, 0xF, 0xF, 0xF, 0xF,
	0xFF, 0xFF, 0xFF, 0x0, 0x0,
	0x0, 0x0, 0x0, 0xFF, 0xFF,
	0xF0, 0xF0, 0xF0, 0xF0, 0xF0,
	0x1C, 0x22, 0x22, 0x1C, 0x22,
	0x3E, 0x54, 0x54, 0x7C, 0x28,
	0x7E, 0x40, 0x40, 0x60, 0x60,
	0x40, 0x7E, 0x40, 0x7E, 0x40,
	0xC6, 0xAA, 0x92, 0x82, 0xC6,
	0x1C, 0x22, 0x22, 0x3C, 0x20,
	0x2, 0x7E, 0x4, 0x78, 0x4,
	0x60, 0x40, 0x7E, 0x40, 0x40,
	0x99, 0xA5, 0xE7, 0xA5, 0x99,
	0x38, 0x54, 0x92, 0x54, 0x38,
	0x32, 0x4E, 0x80, 0x4E, 0x32,
	0xC, 0x52, 0xB2, 0xB2, 0xC,
	0xC, 0x12, 0x1E, 0x12, 0xC,
	0x3D, 0x46, 0x5A, 0x62, 0xBC,
	0x7C, 0x92, 0x92, 0x92, 0x0,
	0x7E, 0x80, 0x80, 0x80, 0x7E,
	0x54, 0x54, 0x54, 0x54, 0x54,
	0x22, 0x22, 0xFA, 0x22, 0x22,
	0x2, 0x8A, 0x52, 0x22, 0x2,
	0x2, 0x22, 0x52, 0x8A, 0x2,
	0x0, 0x0, 0xFF, 0x80, 0xC0,
	0x7, 0x1, 0xFF, 0x0, 0x0,
	0x10, 0x10, 0xD6, 0xD6, 0x10,
	0x6C, 0x48, 0x6C, 0x24, 0x6C,
	0x60, 0xF0, 0x90, 0xF0, 0x60,
	0x0, 0x0, 0x18, 0x18, 0x0,
	0x0, 0x0, 0x8, 0x8, 0x0,
	0xC, 0x2, 0xFF, 0x80, 0x80,
	0x0, 0xF8, 0x80, 0x80, 0x78,
	0x0, 0x98, 0xB8, 0xE8, 0x48,
	0x0, 0x3C, 0x3C, 0x3C, 0x3C, };

